// source: schema.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.chapter02.Direction', null, global);
goog.exportSymbol('proto.chapter02.Echo1Object', null, global);
goog.exportSymbol('proto.chapter02.Echo2Object', null, global);
goog.exportSymbol('proto.chapter02.Echo3Object', null, global);
goog.exportSymbol('proto.chapter02.InnerMessage1', null, global);
goog.exportSymbol('proto.chapter02.InnerMessage2', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chapter02.Echo1Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chapter02.Echo1Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chapter02.Echo1Object.displayName = 'proto.chapter02.Echo1Object';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chapter02.InnerMessage1 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chapter02.InnerMessage1, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chapter02.InnerMessage1.displayName = 'proto.chapter02.InnerMessage1';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chapter02.InnerMessage2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chapter02.InnerMessage2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chapter02.InnerMessage2.displayName = 'proto.chapter02.InnerMessage2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chapter02.Echo2Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chapter02.Echo2Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chapter02.Echo2Object.displayName = 'proto.chapter02.Echo2Object';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chapter02.Echo3Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chapter02.Echo3Object.repeatedFields_, null);
};
goog.inherits(proto.chapter02.Echo3Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chapter02.Echo3Object.displayName = 'proto.chapter02.Echo3Object';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chapter02.Echo1Object.prototype.toObject = function(opt_includeInstance) {
  return proto.chapter02.Echo1Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chapter02.Echo1Object} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chapter02.Echo1Object.toObject = function(includeInstance, msg) {
  var f, obj = {
    d: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    f: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    i32: jspb.Message.getFieldWithDefault(msg, 3, 0),
    i64: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ui32: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ui64: jspb.Message.getFieldWithDefault(msg, 6, 0),
    si32: jspb.Message.getFieldWithDefault(msg, 7, 0),
    si64: jspb.Message.getFieldWithDefault(msg, 8, 0),
    fix32: jspb.Message.getFieldWithDefault(msg, 9, 0),
    fix64: jspb.Message.getFieldWithDefault(msg, 10, 0),
    sfix32: jspb.Message.getFieldWithDefault(msg, 11, 0),
    sfix64: jspb.Message.getFieldWithDefault(msg, 12, 0),
    b: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    s: jspb.Message.getFieldWithDefault(msg, 14, ""),
    bytes: msg.getBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chapter02.Echo1Object}
 */
proto.chapter02.Echo1Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chapter02.Echo1Object;
  return proto.chapter02.Echo1Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chapter02.Echo1Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chapter02.Echo1Object}
 */
proto.chapter02.Echo1Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setD(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI32(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setI64(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUi32(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUi64(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSi32(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setSi64(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFix32(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setFix64(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readSfixed32());
      msg.setSfix32(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setSfix64(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setB(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setS(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chapter02.Echo1Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chapter02.Echo1Object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chapter02.Echo1Object} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chapter02.Echo1Object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getD();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getF();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getI32();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getI64();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getUi32();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getUi64();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getSi32();
  if (f !== 0) {
    writer.writeSint32(
      7,
      f
    );
  }
  f = message.getSi64();
  if (f !== 0) {
    writer.writeSint64(
      8,
      f
    );
  }
  f = message.getFix32();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
  f = message.getFix64();
  if (f !== 0) {
    writer.writeFixed64(
      10,
      f
    );
  }
  f = message.getSfix32();
  if (f !== 0) {
    writer.writeSfixed32(
      11,
      f
    );
  }
  f = message.getSfix64();
  if (f !== 0) {
    writer.writeSfixed64(
      12,
      f
    );
  }
  f = message.getB();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getS();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
};


/**
 * optional double d = 1;
 * @return {number}
 */
proto.chapter02.Echo1Object.prototype.getD = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setD = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float f = 2;
 * @return {number}
 */
proto.chapter02.Echo1Object.prototype.getF = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setF = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 i32 = 3;
 * @return {number}
 */
proto.chapter02.Echo1Object.prototype.getI32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setI32 = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 i64 = 4;
 * @return {number}
 */
proto.chapter02.Echo1Object.prototype.getI64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setI64 = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 ui32 = 5;
 * @return {number}
 */
proto.chapter02.Echo1Object.prototype.getUi32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setUi32 = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 ui64 = 6;
 * @return {number}
 */
proto.chapter02.Echo1Object.prototype.getUi64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setUi64 = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional sint32 si32 = 7;
 * @return {number}
 */
proto.chapter02.Echo1Object.prototype.getSi32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setSi32 = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional sint64 si64 = 8;
 * @return {number}
 */
proto.chapter02.Echo1Object.prototype.getSi64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setSi64 = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional fixed32 fix32 = 9;
 * @return {number}
 */
proto.chapter02.Echo1Object.prototype.getFix32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setFix32 = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional fixed64 fix64 = 10;
 * @return {number}
 */
proto.chapter02.Echo1Object.prototype.getFix64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setFix64 = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional sfixed32 sfix32 = 11;
 * @return {number}
 */
proto.chapter02.Echo1Object.prototype.getSfix32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setSfix32 = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional sfixed64 sfix64 = 12;
 * @return {number}
 */
proto.chapter02.Echo1Object.prototype.getSfix64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setSfix64 = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bool b = 13;
 * @return {boolean}
 */
proto.chapter02.Echo1Object.prototype.getB = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setB = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional string s = 14;
 * @return {string}
 */
proto.chapter02.Echo1Object.prototype.getS = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setS = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bytes bytes = 15;
 * @return {!(string|Uint8Array)}
 */
proto.chapter02.Echo1Object.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes bytes = 15;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.chapter02.Echo1Object.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * optional bytes bytes = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.chapter02.Echo1Object.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chapter02.Echo1Object} returns this
 */
proto.chapter02.Echo1Object.prototype.setBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chapter02.InnerMessage1.prototype.toObject = function(opt_includeInstance) {
  return proto.chapter02.InnerMessage1.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chapter02.InnerMessage1} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chapter02.InnerMessage1.toObject = function(includeInstance, msg) {
  var f, obj = {
    a: jspb.Message.getFieldWithDefault(msg, 1, 0),
    b: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chapter02.InnerMessage1}
 */
proto.chapter02.InnerMessage1.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chapter02.InnerMessage1;
  return proto.chapter02.InnerMessage1.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chapter02.InnerMessage1} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chapter02.InnerMessage1}
 */
proto.chapter02.InnerMessage1.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setA(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chapter02.InnerMessage1.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chapter02.InnerMessage1.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chapter02.InnerMessage1} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chapter02.InnerMessage1.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getA();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getB();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 a = 1;
 * @return {number}
 */
proto.chapter02.InnerMessage1.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.InnerMessage1} returns this
 */
proto.chapter02.InnerMessage1.prototype.setA = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 b = 2;
 * @return {number}
 */
proto.chapter02.InnerMessage1.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.InnerMessage1} returns this
 */
proto.chapter02.InnerMessage1.prototype.setB = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chapter02.InnerMessage2.prototype.toObject = function(opt_includeInstance) {
  return proto.chapter02.InnerMessage2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chapter02.InnerMessage2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chapter02.InnerMessage2.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chapter02.InnerMessage2}
 */
proto.chapter02.InnerMessage2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chapter02.InnerMessage2;
  return proto.chapter02.InnerMessage2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chapter02.InnerMessage2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chapter02.InnerMessage2}
 */
proto.chapter02.InnerMessage2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chapter02.InnerMessage2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chapter02.InnerMessage2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chapter02.InnerMessage2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chapter02.InnerMessage2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.chapter02.InnerMessage2.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.InnerMessage2} returns this
 */
proto.chapter02.InnerMessage2.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.chapter02.InnerMessage2.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.chapter02.InnerMessage2} returns this
 */
proto.chapter02.InnerMessage2.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chapter02.Echo2Object.prototype.toObject = function(opt_includeInstance) {
  return proto.chapter02.Echo2Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chapter02.Echo2Object} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chapter02.Echo2Object.toObject = function(includeInstance, msg) {
  var f, obj = {
    m1: (f = msg.getM1()) && proto.chapter02.InnerMessage1.toObject(includeInstance, f),
    m2: (f = msg.getM2()) && proto.chapter02.InnerMessage2.toObject(includeInstance, f),
    direction: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chapter02.Echo2Object}
 */
proto.chapter02.Echo2Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chapter02.Echo2Object;
  return proto.chapter02.Echo2Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chapter02.Echo2Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chapter02.Echo2Object}
 */
proto.chapter02.Echo2Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chapter02.InnerMessage1;
      reader.readMessage(value,proto.chapter02.InnerMessage1.deserializeBinaryFromReader);
      msg.setM1(value);
      break;
    case 2:
      var value = new proto.chapter02.InnerMessage2;
      reader.readMessage(value,proto.chapter02.InnerMessage2.deserializeBinaryFromReader);
      msg.setM2(value);
      break;
    case 3:
      var value = /** @type {!proto.chapter02.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chapter02.Echo2Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chapter02.Echo2Object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chapter02.Echo2Object} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chapter02.Echo2Object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getM1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.chapter02.InnerMessage1.serializeBinaryToWriter
    );
  }
  f = message.getM2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.chapter02.InnerMessage2.serializeBinaryToWriter
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional InnerMessage1 m1 = 1;
 * @return {?proto.chapter02.InnerMessage1}
 */
proto.chapter02.Echo2Object.prototype.getM1 = function() {
  return /** @type{?proto.chapter02.InnerMessage1} */ (
    jspb.Message.getWrapperField(this, proto.chapter02.InnerMessage1, 1));
};


/**
 * @param {?proto.chapter02.InnerMessage1|undefined} value
 * @return {!proto.chapter02.Echo2Object} returns this
*/
proto.chapter02.Echo2Object.prototype.setM1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chapter02.Echo2Object} returns this
 */
proto.chapter02.Echo2Object.prototype.clearM1 = function() {
  return this.setM1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chapter02.Echo2Object.prototype.hasM1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InnerMessage2 m2 = 2;
 * @return {?proto.chapter02.InnerMessage2}
 */
proto.chapter02.Echo2Object.prototype.getM2 = function() {
  return /** @type{?proto.chapter02.InnerMessage2} */ (
    jspb.Message.getWrapperField(this, proto.chapter02.InnerMessage2, 2));
};


/**
 * @param {?proto.chapter02.InnerMessage2|undefined} value
 * @return {!proto.chapter02.Echo2Object} returns this
*/
proto.chapter02.Echo2Object.prototype.setM2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chapter02.Echo2Object} returns this
 */
proto.chapter02.Echo2Object.prototype.clearM2 = function() {
  return this.setM2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chapter02.Echo2Object.prototype.hasM2 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Direction direction = 3;
 * @return {!proto.chapter02.Direction}
 */
proto.chapter02.Echo2Object.prototype.getDirection = function() {
  return /** @type {!proto.chapter02.Direction} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.chapter02.Direction} value
 * @return {!proto.chapter02.Echo2Object} returns this
 */
proto.chapter02.Echo2Object.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chapter02.Echo3Object.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chapter02.Echo3Object.prototype.toObject = function(opt_includeInstance) {
  return proto.chapter02.Echo3Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chapter02.Echo3Object} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chapter02.Echo3Object.toObject = function(includeInstance, msg) {
  var f, obj = {
    xList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chapter02.Echo3Object}
 */
proto.chapter02.Echo3Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chapter02.Echo3Object;
  return proto.chapter02.Echo3Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chapter02.Echo3Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chapter02.Echo3Object}
 */
proto.chapter02.Echo3Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setXList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chapter02.Echo3Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chapter02.Echo3Object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chapter02.Echo3Object} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chapter02.Echo3Object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 x = 1;
 * @return {!Array<number>}
 */
proto.chapter02.Echo3Object.prototype.getXList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.chapter02.Echo3Object} returns this
 */
proto.chapter02.Echo3Object.prototype.setXList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.chapter02.Echo3Object} returns this
 */
proto.chapter02.Echo3Object.prototype.addX = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.chapter02.Echo3Object} returns this
 */
proto.chapter02.Echo3Object.prototype.clearXList = function() {
  return this.setXList([]);
};


/**
 * @enum {number}
 */
proto.chapter02.Direction = {
  UP: 0,
  DOWN: 1,
  LEFT: 2,
  RIGHT: 999
};

goog.object.extend(exports, proto.chapter02);
